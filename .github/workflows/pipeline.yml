name: 'cpp_CI'

on:
  push:
    branches: [ master ]
    #        - main
    #        - feature/github_actions
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-18.04   # ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - run: echo "pipeline.yml GITHUB_RUN_NUMBER = $GITHUB_RUN_NUMBER"
      - run: sudo apt-get update && sudo apt-get -y install file build-essential cmake libboost-test-dev libspdlog-dev
      # $GITHUB_RUN_NUMBER = ${{ github.run_number }}
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DWITH_BOOST_TEST=ON -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      - run: cmake --build .
      - run: cmake --build . --target test
      - run: cmake --build . --target package
      - run: ls -la

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release helloworld_project ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld_project-1.1.${{ github.run_number }}-Linux.deb
          asset_name: helloworld_project-1.1.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package


#  build-linux:
#    # The CMake configure and build commands are platform agnostic and should work equally
#    # well on Windows or Mac.  You can convert this to a matrix build if you need
#    # cross-platform coverage.
#    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#    runs-on: ubuntu-20.04
#
#    steps:
#      - uses: actions/checkout@v2
#
##      - name: Install conan
##        run: pip3 install conan
#
#      - name: Configure CMake
#        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTS=ON
#
#      - name: Build
#        # Build your program with the given configuration
#        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
#
#      - name: Run tests
#        # Run 'test' cmake target
#        run: ctest --test-dir ${{github.workspace}}/build
#
#  build-windows:
#    # The CMake configure and build commands are platform agnostic and should work equally
#    # well on Windows or Mac.  You can convert this to a matrix build if you need
#    # cross-platform coverage.
#    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#    runs-on: windows-2019
#
#    steps:
#      - uses: actions/checkout@v2
#
##      - name: Install conan
##        run: pip3 install conan
#
#      - name: Configure CMake
#        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTS=ON
#
#      - name: Build
#        # Build your program with the given configuration
#        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
#
#      - name: Run tests
#        # Run 'test' cmake target
#        run: ctest --test-dir ${{github.workspace}}/build
#
#  build-macosx:
#    # The CMake configure and build commands are platform agnostic and should work equally
#    # well on Windows or Mac.  You can convert this to a matrix build if you need
#    # cross-platform coverage.
#    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#    runs-on: macos-10.15
#
#    steps:
#      - uses: actions/checkout@v2
#
##      - name: Install conan
##        run: pip3 install conan
#
#      - name: Configure CMake
#        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTS=ON
#
#      - name: Build
#        # Build your program with the given configuration
#        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
#
#      - name: Run tests
#        # Run 'test' cmake target
#        run: ctest --test-dir ${{github.workspace}}/build
